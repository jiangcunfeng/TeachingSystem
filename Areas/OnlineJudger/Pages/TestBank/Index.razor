@page "/online-judger/test-bank"

@inject IMatToaster Toaster

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
            <MatButton OnClick="@(_ => {NavigationManager.NavigateTo("/online-judger/test-papers");})" Label="See Test Papers"></MatButton>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
            <MatPaginator Length="@size" PageSize="@pageSize" Page="OnPage"></MatPaginator>
        </div>
    </div>
</div>

<MatButton Icon="add" Link="/online-judger/test-bank/create">Create Question</MatButton>
<MatAutocompleteList Items="@options" TItem="string" Label="Search By Type" @bind-Value="@searchByTypeKey"></MatAutocompleteList>
<MatButton OnClick="@Search" Label="Submit"></MatButton>
<MatStringField Icon="assignment" ReadOnly="true" Value="@questionsSelected.Count.ToString()" Label="Questions Selected" IconOnClick="@ShowQuestionsSelected"></MatStringField>
<MatAutocompleteList Items="@options" TItem="string" Label="Test Paper By Type" @bind-Value="@testPaperByTypeKey"></MatAutocompleteList>
<MatButton OnClick="@(_ => {createDialogIsOpen=true;})" Label="Create"></MatButton>

<table class="table">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Type</th>
            <th scope="col">Name</th>
            <th scope="col">Content</th>
            <th scope="col">Answer</th>
            <th scope="col">Course</th>
            <th scope="col">KnowledgePoint</th>
        </tr>
    </thead>
    <tbody>
        @if(questions != null)
        {
            foreach(var question in questions)
            {
                <tr>
                    <td>@question.QuestionId</td>
                    <td>@question.Type</td>
                    <td>@question.Name</td>
                    <td>@question.Content</td>
                    <td>@question.Answer</td>
                    <td>@question.Course</td>
                    <td>@question.Point</td>
                    <td><a href="/online-judger/test-bank/edit/@question.QuestionId">Edit</a>|<button type="button" class="btn btn-link" @onclick="@(_ => {questionToDelete=question;dialogIsOpen=true;})">Delete</button>|<button type="button" class="btn btn-link" @onclick="@(_ => {questionsSelected.Add(question);})">Select</button></td>
                </tr>  
            }
        }
        else 
        {
            <div class="spinner-border" role="status">
                <span class="sr-only">加载中……</span>
            </div>
        }
    </tbody>
</table>

    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>Delete Question</MatDialogTitle>
        <MatDialogContent>
            <p>Delete @questionToDelete?.Name ?</p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogIsOpen = false; })">No</MatButton>
            <MatButton OnClick="@DeleteQuestion">Delete</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@createDialogIsOpen">
        <MatDialogTitle>Create Test Paper</MatDialogTitle>
        <MatDialogContent>
            <p><MatTextField Label="Id" @bind-Value="testPaperId" FullWidth="true"/></p>
            <p><MatTextField Label="Name" @bind-Value="testPaperName" FullWidth="true"/></p>
            <p><MatTextField Label="Course" @bind-Value="testPaperCourse" FullWidth="true"/></p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { createDialogIsOpen = false; })">Cancel</MatButton>
            <MatButton OnClick="@CreateTestPaper">Create</MatButton>
        </MatDialogActions>
    </MatDialog>

@code {
    int page = 0;
    int pageSize = 25;
    int size = 0;
    bool dialogIsOpen = false;
    IEnumerable<Question> questions;
    Question questionToDelete = null;
    string[] options = new[] {"TrueOrFalse", "SingleChoice", "MultipleChoice"};
    string searchByTypeKey;
    bool searchFlag = false;
    List<Question> questionsSelected = new List<Question>();
    bool showQuestionsSelected = false;
    bool createDialogIsOpen = false;
    string testPaperId;
    string testPaperName;
    string testPaperCourse;
    string testPaperByTypeKey;
    async Task OnPage(MatPaginatorPageEvent e)
    {
        pageSize = e.PageSize;
        page = e.PageIndex;
        await UpdateList();
        StateHasChanged();
    }
    async Task DeleteQuestion() 
    {
        DbContext.Questions.Remove(questionToDelete);
        await DbContext.SaveChangesAsync();
        await UpdateList();
        dialogIsOpen = false;
    }
    async Task Search() 
    {
        if (searchByTypeKey != null && searchByTypeKey != "")
        {
            searchFlag = true;
        }
        await UpdateList();
        searchFlag = false;
        searchByTypeKey = null;
    }
    async Task ShowQuestionsSelected()
    {
        showQuestionsSelected = !showQuestionsSelected;
        await UpdateList();
    }
    async Task UpdateList()
    {
        if (searchFlag)
        {
            questions = await DbContext.Questions.Where(c => c.Type == searchByTypeKey).Skip(page * pageSize).Take(pageSize).ToListAsync();
        }
        else if (showQuestionsSelected)
        {
            questions = questionsSelected;
        }
        else 
        {
            questions = await DbContext.Questions.Skip(page * pageSize).Take(pageSize).ToListAsync();
        }
    }
    async Task CreateTestPaper()
    {
        if (questionsSelected.Count == 0)
        {
            questionsSelected = await DbContext.Questions.Where(c => c.Type == testPaperByTypeKey).ToListAsync();
        }
        TestPaper newTestPaper = new TestPaper();
        newTestPaper.TestPaperId = testPaperId;
        newTestPaper.Name = testPaperName;
        newTestPaper.Content = new string[questionsSelected.Count];
        int index = 0;
        foreach (var questionSelected in questionsSelected)
        {
            newTestPaper.Content[index] = questionSelected.QuestionId;
            index++;
        }
        newTestPaper.Course = testPaperCourse;
        if (await DbContext.TestPapers.Where(c => c.TestPaperId == newTestPaper.TestPaperId).CountAsync() != 0) 
        {
            Toaster.Add("The Id already exists, use another one", MatToastType.Danger);
        }
        else 
        {
            await DbContext.TestPapers.AddAsync(newTestPaper);
            await DbContext.SaveChangesAsync();
        }
        testPaperId = null;
        testPaperName = null;
        questionsSelected = new List<Question>();
        testPaperCourse = null;
        testPaperByTypeKey = null;
        createDialogIsOpen = false;
    }
    protected override async Task OnInitializedAsync()
    {
        size = await DbContext.Questions.CountAsync();
        await UpdateList();
    }
}